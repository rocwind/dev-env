#!/usr/bin/env python3
#
import os, sys, subprocess, platform
from urllib.request import urlretrieve
from tempfile import gettempdir


# Download url of this script for upgrading to latest version
download_url = 'https://raw.githubusercontent.com/rocwind/dev-env/master/docker-run'
# The default docker image to use
docker_image = 'docker.io/rocwind/dev-env'
# The default user inside the image/container
container_user = 'dev'
# The default shell inside the image/container
shell = '/bin/bash'
# home, map host ~ => to container /home/$USER
host_user_home = os.path.expanduser('~')
container_user_home = '/home/{}'.format(container_user)
# npm
npm_cache_volume = 'npmcache'
# go
gopath_volume = 'gopath'
# rust - TODO


def show_help():
    print("""Launch dev environment Docker container and execute given command line inside the container.

docker-run [options] [command line]
  --image: Docker image to use, default image is '{}'
  --pull: Always pull latest image before execute any Docker command
  --shell: Shell used for executing command line inside container, default to '{}'
  --no-args-path-mapping: Skip auto map command line args path into path inside container.
                          By default paths that under host user $HOME will be mapped automatically.
  --upgrade: Upgrade image and this script self
  --help: Show this help information

If [command line] was specified, execute the [command line] inside container and exit;
Otherwise launch the container with interative shell.""".format(docker_image, shell))
    return -1

def run_cmd_with_result(cmd):
    result = ''
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode('utf-8').strip()
    except:
        pass
    return result

def is_host_path_inside_user_home(path):
    return os.path.normpath(os.path.expanduser(path)).startswith(host_user_home)

def map_host_path_to_container_path(path):
    return os.path.join(container_user_home, os.path.relpath(os.path.normpath(os.path.expanduser(path)), host_user_home))

# -w xxx -v xxx:yyy --env xxx=yyy
def get_env_and_volume_mapping_flags():
    container_npm_cache = '/home/{}/.npm'.format(container_user)
    container_gopath = '/home/{}/go'.format(container_user)
    # env
    env_list = [
        ['npm_config_cache', container_npm_cache],
        ['GOPATH', container_gopath],
    ]
    env_flags = ' '.join(map(lambda pair: '--env {}={}'.format(pair[0], pair[1]), env_list))
    # volume mapping
    volume_mapping = [
        [host_user_home, container_user_home],
    ]
    # npm cache
    host_npm_cache = run_cmd_with_result(['npm', 'config', 'get', 'cache'])
    if host_npm_cache:
        volume_mapping.append([host_npm_cache, container_npm_cache])
    else:
        run_cmd_with_result(['docker', 'volume', 'create', npm_cache_volume])
        volume_mapping.append([npm_cache_volume, container_npm_cache])
    # go path
    host_gopath = ''
    go_env_outputs = run_cmd_with_result(['go', 'env'])
    if go_env_outputs:
        for item in go_env_outputs.split('\n'):
            (env, value) = item.split('=')
            if (env != 'GOPATH'):
                continue
            host_gopath = value.strip('"')
            break
    if host_gopath:
        volume_mapping.append([host_gopath, container_gopath])
    else:
        run_cmd_with_result(['docker', 'volume', 'create', gopath_volume])
        volume_mapping.append([gopath_volume, container_gopath])
    volume_mapping_flags = ' '.join(map(lambda pair: '-v {}:{}'.format(pair[0], pair[1]), volume_mapping))

    # set current dir for container
    # TODO: handle the case that the current dir is not inside user home?
    host_current_dir = os.getcwd()
    container_current_dir = map_host_path_to_container_path(host_current_dir)
    return '-w {} {} {}'.format(
        container_current_dir,
        volume_mapping_flags,
        env_flags,
    )

# update this script self
def self_upgrade():
    print('pull docker image ...')
    os.system('docker pull {}'.format(docker_image))

    print('check script upgrade ...')
    this_script_path = os.path.realpath(__file__)

    # download
    print('downloading ...')
    download_file = os.path.join(gettempdir(), 'docker-run.download')
    urlretrieve(download_url, download_file)
    print('download completed.')

    os.system('chmod +x "{}"'.format(download_file))
    os.system('rm -f {} && mv {} {}'.format(this_script_path, download_file, this_script_path))
    print('upgrade success, will be available in next run.')
    return 0


if __name__ == '__main__':
    # simple arg parse
    command = []
    pull = False
    # flags
    command_begin = False
    next_arg_is_image = False
    next_arg_is_shell = False
    no_args_path_mapping = False
    for arg in sys.argv[1:]:
        if next_arg_is_image:
            docker_image = arg
            next_arg_is_image = False
            continue
        if next_arg_is_shell:
            shell = arg
            next_arg_is_shell = False
            continue
        if not command_begin and arg == "--pull":
            pull = True
            continue
        if not command_begin and arg == "--image":
            next_arg_is_image = True
            continue
        if not command_begin and arg == "--shell":
            next_arg_is_shell = True
            continue
        if not command_begin and arg == "--no-args-path-mapping":
            no_args_path_mapping = True
            continue
        if not command_begin and arg == "--help":
            exit(show_help())
            continue
        if not command_begin and arg == "--upgrade":
            exit(self_upgrade())
            continue

        command.append(arg)
        command_begin = True

    # pull docker image if needed
    if pull:
        os.system('docker pull {}'.format(docker_image))

    # map env vars
    env_and_volume_mapping_flags = get_env_and_volume_mapping_flags()

    # check if input is tty
    tty_flag = ''
    shell_flag = ''
    if sys.stdin.isatty():
        tty_flag = '-t'
        #shell_flag = '-i'

    # common flags with path mount and env mappings
    flags = '--rm -u root -i {} {}'.format(
        tty_flag,
        env_and_volume_mapping_flags,
    )

    # run script
    container_cmd = ''
    if len(command) > 0:
        # run in one-time command mode
        # map paths if needed
        command = map(lambda p: map_host_path_to_container_path(p) if not no_args_path_mapping and is_host_path_inside_user_home(p) else p, command)
        commandline = ' '.join(command)
        container_cmd = "{} {} -c '{}'".format(
            shell,
            shell_flag,
            commandline.replace("'", "'\"'\"'"),
        )
    else:
        # run in interactive mode, launch the shell
        container_cmd = shell

    # handle the permission issue when working in linux as non-root user
    # add a temp bootstrap file which
    # - modifies the user and group id
    # - launch shell as the container_user
    bootstrap_script = ''
    if platform.system() != 'Linux' and run_cmd_with_result(['whoami']) != 'root':
        uid = run_cmd_with_result(['id', '-u'])
        gid = run_cmd_with_result(['id', '-g'])
        bootstrap_script = os.path.join(gettempdir(), 'bootstrap')
        with open(bootstrap_script, mode='w', encoding='utf-8') as fp:
            fp.write('#!{}\n'.format(shell))
            fp.write('set -m\n')
            fp.write('groupmod -g {} {}\n'.format(gid, container_user))
            fp.write('usermod -u {} {}\n'.format(gid, container_user))
            fp.write('su {} -c "cd `pwd` && {}"'.format(container_user, container_cmd))
        run_cmd_with_result(['chmod', '+x', bootstrap_script])
        container_bootstrap = '/opt/bootstrap'

        flags = '{} -v {}:{}'.format(flags, bootstrap_script, container_bootstrap)
        container_cmd = container_bootstrap

    whole_cmd = 'docker run {} {} {}'.format(
        flags,
        docker_image,
        container_cmd,
    )

    # execute the cmd
    #print(whole_cmd)
    result = subprocess.run(whole_cmd, shell=True)

    if bootstrap_script:
        os.remove(bootstrap_script)

    exit(result.returncode)
